using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using ContosoUniversity.Data;
using ContosoUniversity.Models;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Configuration;

namespace ContosoUniversity.Pages.Students
{
	public class IndexModel : PageModel
	{
		private readonly SchoolContext _context;
		private readonly IConfiguration Configuration;
		public IndexModel(SchoolContext context, IConfiguration configuration) // index model
		{
			_context = context;
			Configuration = configuration;
		}

		// Sorting parameters
		public string NameSort { get; set; }
		public string DateSort { get; set; }
		public string CurrentFilter { get; set; }
		public string CurrentSort { get; set; }

		public PaginatedList<Student> Students { get; set; }

		// OnGet recieves a sort order from the query string.
		// URL + query string is generated by Anchor Tag Helper
		public async Task OnGetAsync(string sortOrder, string searchString, string currentFilter, int? pageIndex) // sortOrder is parsed from query string in URL -- generated by Anchor Tag Helper
		{
			CurrentSort = sortOrder; // We're saving the user's current sort order to this var.
			NameSort = String.IsNullOrEmpty(sortOrder) ? "name_desc" : "";
			DateSort = sortOrder == "Date" ? "date_desc" : "Date";

			if (searchString != null)
			{
				pageIndex = 1;
			}
			else
			{
				searchString = currentFilter;
			}

			CurrentFilter = searchString;

			// Query all students in DB
			// Even if this interface is created, no query is sent to the database
			// it's not executed until Iqueryable object is converted into a collection.
			// !! Note that the filtering process (ie .Where()) is done on SERVER side
			IQueryable<Student> studentsIQ = from s in _context.Students
											 select s;

			if (!String.IsNullOrEmpty(searchString))
			{
				// Do the filter query before any sorting is done in the switch statement
				studentsIQ = studentsIQ.Where(s => s.LastName.Contains(searchString)
										|| s.FirstMidName.Contains(searchString));
			}

			studentsIQ = sortOrder switch
			{
				// Sort by whichever condition it was given
				"name_desc" => studentsIQ.OrderByDescending(s => s.LastName),// _desc to specify descending order
				"Date" => studentsIQ.OrderBy(s => s.EnrollmentDate),
				"date_desc" => studentsIQ.OrderByDescending(s => s.EnrollmentDate),
				_ => studentsIQ.OrderBy(s => s.LastName),
			};

			var pageSize = Configuration.GetValue("PageSize", 4); // Try to use default value, use 4 if failed.
			Students = await PaginatedList<Student>.CreateAsync(
				studentsIQ.AsNoTracking(), pageIndex ?? 1, pageSize);
		}
	}
}
